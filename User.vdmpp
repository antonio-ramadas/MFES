class User
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
	-- network of contacts of this user
	public connections: set of User := {};
	public name: seq of char;
	
operations
	-- constructor
	public User: seq of char ==> User
	User(n) == (name := n; return self)
	post connections = {} and name = n;
	
	-- add a new connection on this user
	public addConnection: User ==> ()
	addConnection(c) == connections := connections union {c}
	pre c <> self and c not in set connections
	post connections = connections~ union {c};
	
	-- compares the given name woth the one of the user
	public similarName: seq of char ==> bool
	similarName(n) == (
	dcl index: nat1 := 1;
	dcl startFound: bool := false;
	
	-- if the hint is longer than of the name, then we can anticipate a failure
	if len n > len name then
		return false;
		
	-- find the start to compare
	while (not startFound) do (
		if n(1) = name(index) then
			startFound := true
		else
			index := index + 1;
	);
	
	-- it only compares until the length of n
	for index1 = index to len n do
		if n(index1) <> name(index1) then
			return false;

	return true)
	-- TODO enhance comparision
	
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end User