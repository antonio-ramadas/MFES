class Linkedin
types
-- TODO Define types here
values
	public INFINITY: nat1 = 9999;

instance variables
	public users: set of User := {};
	
	public groups: map seq1 of char to Group := {|->};
	
	private static linkedin: Linkedin := new Linkedin();
	
	-- invariant to maintain the correctness (each connection is bidirectional)
	inv forall user1 in set users &
				forall user2 in set user1.connections &
					user1 in set user2.connections;

operations
	private Linkedin: () ==> Linkedin
	Linkedin() == return self
	post users = {};
	
	
	-- singleton - return the existent instance
	public pure static getInstance: () ==> Linkedin
	getInstance() == return linkedin;
	
	
	-- singleton - reset the instance
	public static clearInstance: () ==> Linkedin
	clearInstance() == (
		linkedin := new Linkedin();
		return getInstance();
	)
	post RESULT.users = {};


	public addUser: User ==> ()
	addUser(user) == users := users union {user}
	pre user not in set users
	post users = users~ union {user};


	public getUsersName: () ==> seq of seq of char
	getUsersName() == (
		dcl names: seq of seq of char := [];
		
		for all user in set users do
			names := names ^ [user.name];

		return names
	);


	public addConnection: User * User ==> ()
	addConnection(user1, user2) == (
	--|| (user1.addConnection(user2), user2.addConnection(user1))
		dcl user1_temp: User := user1;
		dcl user2_temp: User := user2;
		atomic (
			user1_temp.connections := user1.connections union {user2};
			user2_temp.connections := user2.connections union {user1}
		);
	)
	pre
			-- they are not the same user
			user1 <> user2 and
			-- both users exist in the database
			user1 in set users and
			user2 in set users and
			-- there's no connection between them
			user2 not in set user1.connections and
			user1 not in set user2.connections
	post user2 in set user1.connections and
			user1 in set user2.connections;


	public addGroup: seq1 of char * User ==> ()
	addGroup(name, user) == groups := groups munion {name |-> new Group(user)}
	pre
			-- each group name is unique
			name not in set dom groups and
			user in set users;


	public addGroupUser: seq1 of char * User ==> ()
	addGroupUser(name, user) == groups(name).addUser(user)
	pre user in set users and
			name in set dom groups;


	public removeGroupUser: seq1 of char * User ==> ()
	removeGroupUser(name, user) == groups(name).removeUser(user)
	pre user in set users and
			name in set dom groups;


	public pure mostPopularGroup: () ==> seq1 of char
	mostPopularGroup() == (
		dcl name: [seq1 of char] := nil;
		
		for all groupName in set dom groups do
			if name = nil or card groups(groupName).users > card groups(name).users then
				name := groupName;
		
		return name
	)
	post RESULT in set dom groups and
			card {g | g in set dom groups & card groups(g).users > card groups(RESULT).users} = 0;
	

	public pure getGroupNames: () ==> set of seq1 of char
	getGroupNames() == return dom groups;
	

	public pure getGroupInfo: seq1 of char ==> Group
	getGroupInfo(name) == return groups(name)
	pre name in set dom groups;
	

	-- returns all users that have a similar name to the given one
	public pure searchByName: seq of char ==> set of User
	searchByName(name) == return {user | user in set users & user.similarName(name)} --(
	--dcl results: set of User := {};
	
	--for all user in set users do (
	--	if user.similarName(name) then
	--		results := results union {user};
	--);
	
	--return results)
	pre len name > 0;
	

	-- returns commun contacts between two users
	public pure findConnections: User * User ==> set of User
	findConnections(user1, user2) ==
		return user1.connections inter user2.connections
	pre user1 <> user2 and
			user1 in set users and
			user2 in set users;
	

	public pure mostFamousUser: () ==> User
	mostFamousUser() ==
	(
		dcl famous: [User] := nil;
		
		for all user in set users do
			if famous = nil or card user.connections > card famous.connections then
				famous := user;
		
		return famous
	)
	pre card users > 0
	post RESULT in set users and
			card {u | u in set users & card u.connections > card RESULT.connections} = 0;
	

	-- to calculate the minimum distance between users it is used the breadth first search algorithm
	public pure distance: User * User ==> nat
	distance(user1, user2) == (
		dcl search: set of User := user1.connections;
		dcl searchTemp: set of User := search;
		dcl counter: nat1 := 1;

		if user1 = user2 then
			return 0;
		
		while user2 not in set search do (
			counter := counter + 1;
			
			-- add to the search set the connections of the current users (add to the search the next level of the tree)
			for all user in set search do
				search := search union user.connections;
			
			-- to prevent an infinite loop
			if card searchTemp = card search then
				return INFINITY
			else
				searchTemp := search
		);
		
		-- if the two users are not reachable then it is returned INFINITY
		if user2 not in set search then
			return INFINITY
		else
			return counter
	)
	pre user1 in set users and
			user2 in set users;
	
	
	public pure averageUserDistance: () ==> real
	averageUserDistance() == (
		dcl sum: real := 0;
		dcl subSearch: set of User := users;
		
		for all user1 in set users do (
			subSearch := subSearch \ {user1};
			for all user2 in set subSearch do
				sum := sum + distance(user1, user2);
		);
		
		return sum / card users;
	)
	pre card users > 0
	post RESULT >= 0;
	

	public pure averageDistanceToOthers: User ==> real
	averageDistanceToOthers(user1) == (
		dcl sum: real := 0;
		
		for all user2 in set users do
				sum := sum + distance(user1, user2);
		
		return sum / (card users - 1);
	)
	pre card users > 1 and user1 in set users
	post RESULT >= 0;
	
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Linkedin