class Linkedin
types
-- TODO Define types here
values
	private INFINITY: nat1 = 9999;

instance variables
	-- users of the social network
	private users: set of User := {};
	
	--groups of the social network
	private groups: map seq1 of char to Group := {|->};
	
operations
	-- constructor
	public Linkedin: () ==> Linkedin
	Linkedin() == return self
	post users = {};
	
	-- add a new user to the social network
	public addUser: User ==> ()
	addUser(user) == users := users union {user}
	pre user not in set users
	post users = users~ union {user};
	
	-- add a new connections between users
	public addConnection: User * User ==> ()
	addConnection(user1, user2) ==
	|| (user1.addConnection(user2), user2.addConnection(user1))
	pre
			-- they are not the same user
			user1 <> user2 and
			-- both users exist in the database
			user1 in set users and
			user2 in set users and
			-- there's no connection between them
			user2 not in set user1.connections and
			user1 not in set user2.connections
	post user2 in set user1.connections and user1 in set user2.connections;
	
	-- add a new group to the social network (each group name is unique)
	public addGroup: seq1 of char ==> ()
	addGroup(name) == groups := groups munion {name |-> new Group()}
	pre name not in set dom groups;
	
	-- add a user to the group
	public addGroupUser: seq1 of char * User ==> ()
	addGroupUser(name, user) == groups(name).addUser(user)
	pre user in set users and name in set dom groups;
	
	-- remove a user from a group
	public removeGroupUser: seq1 of char * User ==> ()
	removeGroupUser(name, user) == groups(name).removeUser(user)
	pre user in set users and name in set dom groups;
	
	-- send a message to a group
	public msgGroup: seq1 of char * User * seq1 of char ==> ()
	msgGroup(groupName, user, msg) == groups(groupName).sendMsg(user, msg)
	pre user in set users and groupName in set dom groups;
	
	-- get messages from a group
	public getGroupMsgs: seq1 of char * User ==> seq of Group`Message
	getGroupMsgs(groupName, user) == return groups(groupName).checkMsgs(user)
	pre user in set users and groupName in set dom groups;
	
	-- returns the most popular group in the social network
	public mostPopularGroup: () ==> seq1 of char
	mostPopularGroup() == (
		dcl name: [seq1 of char] := nil;
		
		for all groupName in set dom groups do
			if name = nil or len groups(groupName).msgs > len groups(name).msgs then
				name := groupName;
		
		return name
	)
	post RESULT in set dom groups and card {g | g in set dom groups & len groups(g).msgs > len groups(RESULT).msgs} = 0;
	
	-- returns the names of all groups in the social network
	public getGroupNames: () ==> set of seq1 of char
	getGroupNames() == return dom groups;
	
	-- returns all the information about a group
	public getGroupInfo: seq1 of char ==> Group
	getGroupInfo(name) == return groups(name)
	pre name in set dom groups;
	
	-- returns all users that have a similar name to the given one
	public searchByName: seq of char ==> set of User
	searchByName(name) == return {user | user in set users & user.similarName(name)} --(
	--dcl results: set of User := {};
	
	--for all user in set users do (
	--	if user.similarName(name) then
	--		results := results union {user};
	--);
	
	--return results)
	pre len name > 0;
	
	-- returns commun contacts between two users
	public findConnections: User * User ==> set of User
	findConnections(user1, user2) ==
		return user1.connections inter user2.connections
	pre user1 <> user2 and user1 in set users and user2 in set users;
	
	-- returns the most famous person in the network
	public mostFamousUser: () ==> User
	mostFamousUser() ==
	(
		dcl famous: [User] := nil;
		
		for all user in set users do
			if famous = nil or card user.connections > card famous.connections then
				famous := user;
		
		return famous
	)
	pre card users > 0
	post RESULT in set users and card {u | u in set users & card u.connections > card RESULT.connections} = 0;
	
	-- calculates the distance between 2 users (starts looking by the user in the first argument)
	-- to calculate the minimum distance between users it is used the breadth first search algorithm
	public distance: User * User ==> nat
	distance(user1, user2) == (
		dcl search: set of User := user1.connections;
		dcl searchTemp: set of User := search;
		dcl counter: nat1 := 1;

		if user1 = user2 then
			return 0;
		
		-- while user2 is not in the search results
		while user2 not in set search do (
			counter := counter + 1;
			
			-- add to the search set the connections of the current users (add to the search the next level of the tree)
			for all user in set search do
				search := search union user.connections;
			
			-- to prevent an infinite loop
			if card searchTemp = card search then
				return INFINITY
			else
				searchTemp := search
		);
		
		-- if the two users are not reachable then it is returned INFINITY
		if user2 not in set search then
			return INFINITY
		else
			return counter
	)
	pre user1 in set users and user2 in set users;
	
	-- calculates the average user distance in the network
	public averageUserDistance: () ==> real
	averageUserDistance() == (
		dcl avg: real := 0;
		dcl subSearch: set of User := users;
		
		for all user1 in set users do (
			subSearch := subSearch \ {user1};
			for all user2 in set subSearch do
				avg := avg + distance(user1, user2);
		);
		
		return avg / card users;
	)
	pre card users > 0
	post RESULT >= 0;
	
	-- remove repetitions from a sequence of any type
	private removeRepetitions: seq of ? ==> seq of ?
	removeRepetitions(repSeq) == (
		dcl noRepSeq: seq of ? := [];
		
		for user in repSeq do 
			if (user not in set elems noRepSeq) then
				noRepSeq := noRepSeq ^ [user];

		return noRepSeq;
	);
	
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Linkedin