class LinkedinTest is subclass of MyTestCase
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
	user1: User := new User("antonio");
	user2: User := new User("duarte");
	user3: User := new User("marina");
	user4: User := new User("ramadas");
	user5: User := new User("pinto");
	user6: User := new User("camilo");
	user7: User := new User("ardonio");
	user8: User := new User("cc");
	user9: User := new User("coimbras");
operations
	-- this function asserts if everything is working as it should
	-- uncomment tests supposed to fail to check if pre and post conditions are working
	--as they should (the test are between multiline comments (/* */) 
	public static main: () ==> ()
	main() ==
	(
		dcl linkedinTest: LinkedinTest := new LinkedinTest();
		
		IO`print("testAddUsers -> ");
		linkedinTest.testAddUsers();
		IO`println("Success");
		
		IO`print("testUserSearch -> ");
		linkedinTest.testUserSearch();
		IO`println("Success");
		
		IO`print("testUserConnections -> ");
		linkedinTest.testUserConnections();
		IO`println("Success");
		
		IO`print("testSearchConnections -> ");
		linkedinTest.testSearchConnections();
		IO`println("Success");
		
		IO`print("testMostPopularUser -> ");
		linkedinTest.testMostPopularUser();
		IO`println("Success");
		
		IO`print("testUserCv -> ");
		linkedinTest.testUserCv();
		IO`println("Success");
		
		IO`print("testAddGroups -> ");
		linkedinTest.testAddGroups();
		IO`println("Success");
		
		IO`print("testAddGroupUsers -> ");
		linkedinTest.testAddGroupUsers();
		IO`println("Success");
		
		IO`print("testRemoveGroupUsers -> ");
		linkedinTest.testRemoveGroupUsers();
		IO`println("Success");
		
		IO`print("testMsgGroup -> ");
		linkedinTest.testMsgGroup();
		IO`println("Success");
		
		IO`print("testPopularGroup -> ");
		linkedinTest.testPopularGroup();
		IO`println("Success");
		
		IO`print("testGroupNames -> ");
		linkedinTest.testGroupNames();
		IO`println("Success");
		
		IO`print("testGroupInfo -> ");
		linkedinTest.testGroupInfo();
		IO`println("Success");
		
		IO`print("testUsersDistance -> ");
		linkedinTest.testUsersDistance();
		IO`println("Success");
		
		IO`print("testUsersAvgDistance -> ");
		linkedinTest.testUsersAvgDistance();
		IO`println("Success");
		
		linkedinTest.testUserAvgDistance();
	);
	
	-- test if the registration of users in the social network is working correctly
	private testAddUsers: () ==> ()
	testAddUsers() == (
		dcl linkedin: Linkedin := Linkedin`clearInstance();
		
		createAndAddUsers();
		
		assertEqual(9, card linkedin.users);
		
		assertEqual({user1,	user2, user3,	user4, user5,	user6, user7,	user8, user9}, linkedin.users);
		
		-- this test is supposed to fail (the same user cannot register twice in the network)
		/**linkedin.addUser(user1);**/
	);
	
	-- test user search by their name
	private testUserSearch: () ==> ()
	testUserSearch() == (
		dcl linkedin: Linkedin := Linkedin`clearInstance();
		
		createAndAddUsers();
		
		-- there is not a user whose name match this search
		assertEqual({}, linkedin.searchByName("nil user"));
		
		-- match at the beginning of the name
		assertEqual({user1}, linkedin.searchByName("ant"));
		
		-- match at the end of the name
		assertEqual({user2}, linkedin.searchByName("te"));
		
		-- multiple results
		assertEqual({user1, user7}, linkedin.searchByName("onio"));

		-- the first 3 users connect to each other
		linkedin.addConnection(user1, user2);
		linkedin.addConnection(user1, user3);
		linkedin.addConnection(user2, user3);
		-- 3 is connected with 4, 4 with 7 and 7 with 6
		linkedin.addConnection(user3, user4);
		linkedin.addConnection(user4, user7);
		linkedin.addConnection(user7, user6);
		
		-- the search is sorted according to the distance of the user
		assertEqual([user2, user3, user4, user7, user6, user9], user1.userSearchByName("a"));
	);
	
	-- test the creation of connections between users
	private testUserConnections: () ==> ()
	testUserConnections() == (
		dcl dummyUser: User := new User("dummy user");
		dcl linkedin: Linkedin := Linkedin`clearInstance();
		
		createAndAddUsers();

		-- add a new connection between users
		linkedin.addConnection(user1, user2);
		assertEqual({user2}, user1.connections);
		assertEqual({user1}, user2.connections);
		
		-- this is suppose to fail (cannot add a connection between an user in the network and one that is not)
		/*linkedin.addConnection(dummyUser, user2);*/
	);
	
	-- test the search of commun connections between users
	private testSearchConnections: () ==> ()
	testSearchConnections() == (
		dcl dummyUser: User := new User("dummy user");
		dcl linkedin: Linkedin := Linkedin`clearInstance();
		
		createAndAddUsers();	
		
		-- the first 3 users connect to each other
		linkedin.addConnection(user1, user2);
		linkedin.addConnection(user1, user3);
		linkedin.addConnection(user2, user3);

		-- the commun connection is only 1 user
		assertEqual({user3}, linkedin.findConnections(user1, user2));
		
		-- this assert is suppose to fail (dummyUser is not in the network)
		/*assertEqual({}, linkedin.findConnections(dummyUser, user2));*/
	);
	
	-- test the search for the most famous user
	private testMostPopularUser: () ==> ()
	testMostPopularUser() == (
		dcl dummyUser: User := new User("dummy user");
		dcl linkedin: Linkedin := Linkedin`clearInstance();
		
		createAndAddUsers();
	
		linkedin.addConnection(user1, user2);
		linkedin.addConnection(user1, user3);
		linkedin.addConnection(user2, user3);
		linkedin.addConnection(user1, user4);
		
		assertEqual(user1, linkedin.mostFamousUser());
	);
	
	-- test the manipulation of users' cv
	private testUserCv: () ==> ()
	testUserCv() == (
		dcl linkedin: Linkedin := Linkedin`clearInstance();
		
		createAndAddUsers();
		
		user1.updateCV("---User1 CV---Welcome to my CV!!");
		assertEqual("---User1 CV---Welcome to my CV!!", user1.cv);
		
		user1.deleteCV();
		assertEqual("", user1.cv);
	);
	
	-- test the creation of groups
	private testAddGroups: () ==> ()
	testAddGroups() == (
		dcl linkedin: Linkedin := Linkedin`clearInstance();
		
		createAndAddUsers();
		
		linkedin.addGroup("Antonio's Group");
		assertEqual(1, card dom linkedin.groups);

		-- this test is suppose to fail (cannot be two groups with the same name)
		/*linkedin.addGroup("Antonio's Group");*/
	);
	
	-- test the registration of users in groups
	private testAddGroupUsers: () ==> ()
	testAddGroupUsers() == (
		dcl dummyUser: User := new User("dummy user");
		dcl linkedin: Linkedin := Linkedin`clearInstance();
		
		createAndAddUsers();
		
		linkedin.addGroup("Antonio's Group");
		
		linkedin.addGroupUser("Antonio's Group", user1);
		linkedin.addGroupUser("Antonio's Group", user2);
		linkedin.addGroupUser("Antonio's Group", user3);
		
		assertEqual({user1, user2, user3}, linkedin.groups("Antonio's Group").users);
		
		-- this test is suppose to fail (the user is not in the network)
		/*linkedin.addGroupUser("Antonio's Group", dummyUser);*/
		
		-- this test is suppose to fail (the group does not exist)
		/*linkedin.addGroupUser("Dummy's Group", user1);*/
	);
	
	-- test the removal of users from groups
	private testRemoveGroupUsers: () ==> ()
	testRemoveGroupUsers() == (
		dcl linkedin: Linkedin := Linkedin`clearInstance();
		
		createAndAddUsers();
		
		linkedin.addGroup("Antonio's Group");
		
		linkedin.addGroupUser("Antonio's Group", user1);
		
		linkedin.removeGroupUser("Antonio's Group", user1);
		assertEqual({}, linkedin.groups("Antonio's Group").users);
		
		-- this test is suppose to fail (cannot remove a user that is not in the group)
		/*linkedin.removeGroupUser("Antonio's Group", user2);*/
		
		-- this test is suppose to fail (cannot remove a user from a group that does not exist)
		/*linkedin.removeGroupUser("Dummy's Group", user1);*/
	);
	
	-- test messaging the group
	private testMsgGroup: () ==> ()
	testMsgGroup() == (
		dcl linkedin: Linkedin := Linkedin`clearInstance();
		
		createAndAddUsers();
		
		linkedin.addGroup("Antonio's Group");
		
		linkedin.addGroupUser("Antonio's Group", user1);
		
		user1.msgGroup("Antonio's Group", "Hello, World!");
		assertEqual(["Hello, World!"], user1.getGroupMsgs("Antonio's Group"));
		
		-- this test is suppose to fail (the user does not have access to the group)
		/*linkedin.getGroupMsgs("Antonio's Group", user2);*/
		
		-- this test is suppose to fail (the user is not in the group)
		/*linkedin.msgGroup("Antonio's Group", user2, "Dummy Message!");*/
		
		-- this test is suppose to fail (there is no such group)
		/*linkedin.msgGroup("Dummy's Group", user1, "Dummy Message!");*/
	);
	
	-- test the search for the group with more registrated users
	private testPopularGroup: () ==> ()
	testPopularGroup() == (
		dcl linkedin: Linkedin := Linkedin`clearInstance();
		
		createAndAddUsers();
		
		linkedin.addGroup("Antonio's Group");
		linkedin.addGroup("Duarte's Group");
		linkedin.addGroup("Marina's Group");
		
		linkedin.addGroupUser("Antonio's Group", user1);
		linkedin.addGroupUser("Antonio's Group", user2);
		linkedin.addGroupUser("Antonio's Group", user3);
		
		linkedin.addGroupUser("Duarte's Group", user1);
		linkedin.addGroupUser("Duarte's Group", user2);
		
		linkedin.addGroupUser("Marina's Group", user1);
		
		assertEqual("Antonio's Group", linkedin.mostPopularGroup());
	);
	
	-- test to check if all the groups' name is returned
	private testGroupNames: () ==> ()
	testGroupNames() == (
		dcl linkedin: Linkedin := Linkedin`clearInstance();
		
		createAndAddUsers();
		
		linkedin.addGroup("Antonio's Group");
		linkedin.addGroup("Duarte's Group");
		linkedin.addGroup("Marina's Group");
		
		assertEqual({"Antonio's Group", "Duarte's Group", "Marina's Group"}, linkedin.getGroupNames());
	);
	
	-- test if the returned information of a given group is correct
	private testGroupInfo: () ==> ()
	testGroupInfo() == (
		dcl linkedin: Linkedin := Linkedin`clearInstance();
		
		createAndAddUsers();
		
		linkedin.addGroup("Antonio's Group");
		
		assertEqual(linkedin.groups("Antonio's Group"), linkedin.getGroupInfo("Antonio's Group"));
		
		-- this test is supposed to fail (there is not such group)
		/*linkedin.getGroupInfo("Dummy's Group");*/
	);
	
	-- test the distance between users
	private testUsersDistance: () ==> ()
	testUsersDistance() == (
		dcl dummyUser: User := new User("dummy user");
		dcl linkedin: Linkedin := Linkedin`clearInstance();
		
		createAndAddUsers();
	
		linkedin.addConnection(user1, user2);
		linkedin.addConnection(user1, user3);
		
		-- the distance to the user itself is zero
		assertEqual(0, linkedin.distance(user1, user1));
		
		-- the distance between two users connected is 1
		assertEqual(1, linkedin.distance(user1, user2));
		
		-- the distance between users is bilateral
		assertEqual(linkedin.distance(user2, user1), linkedin.distance(user1, user2));
		
		-- the users are not directly connected
		assertEqual(2, linkedin.distance(user2, user3));
		
		-- the users are not connected
		assertEqual(Linkedin`INFINITY, linkedin.distance(user5, user6));
		
		-- this test is supposed to fail (dummyUser is not in the network)
		/*assertEqual("ERROR", linkedin.distance(dummyUser, user3));*/
	);
	
	-- test to check if it is made the correct average of the distance between users
	private testUsersAvgDistance: () ==> ()
	testUsersAvgDistance() == (
		dcl linkedin: Linkedin := Linkedin`clearInstance();
		
		user1 := new User("antonio");
		user2 := new User("duarte");
		user3 := new User("marina");
		linkedin.addUser(user1);
		linkedin.addUser(user2);
		linkedin.addUser(user3);
		
		linkedin.addConnection(user1, user2);
		linkedin.addConnection(user1, user3);
		linkedin.addConnection(user2, user3);
		
		assertEqual(1, linkedin.averageUserDistance());
	);
	
	-- test to check if it is made the correct average of the distance between an user to all users
	private testUserAvgDistance: () ==> ()
	testUserAvgDistance() == (
		dcl dummyUser: User := new User("dummy user");
		dcl linkedin: Linkedin := Linkedin`clearInstance();
		
		user1 := new User("antonio");
		user2 := new User("duarte");
		user3 := new User("marina");
		linkedin.addUser(user1);
		linkedin.addUser(user2);
		linkedin.addUser(user3);
		
		linkedin.addConnection(user1, user2);
		linkedin.addConnection(user1, user3);
		
		assertEqual(1.5, linkedin.averageDistanceToOthers(user3));
		
		-- this test is supposed to fail (dummyUser is not in the network)
		/*linkedin.averageDistanceToOthers(dummyUser));*/
	);
	
	private createAndAddUsers: () ==> ()
	createAndAddUsers() ==	(
		user1 := new User("antonio");
		user2 := new User("duarte");
		user3 := new User("marina");
		user4 := new User("ramadas");
		user5 := new User("pinto");
		user6 := new User("camilo");
		user7 := new User("ardonio");
		user8 := new User("cc");
		user9 := new User("coimbras");
	
		Linkedin`getInstance().addUser(user1);
		Linkedin`getInstance().addUser(user2);
		Linkedin`getInstance().addUser(user3);
		Linkedin`getInstance().addUser(user4);
		Linkedin`getInstance().addUser(user5);
		Linkedin`getInstance().addUser(user6);
		Linkedin`getInstance().addUser(user7);
		Linkedin`getInstance().addUser(user8);
		Linkedin`getInstance().addUser(user9);
	);
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end LinkedinTest