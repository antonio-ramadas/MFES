class User
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
	-- network of contacts of this user
	public connections: set of User := {};
	public name: seq1 of char;
	public cv: seq of char := "";
	
operations
	-- constructor
	public User: seq of char ==> User
	User(n) == (
		name := n;
		return self
	)
	post connections = {} and name = n;
	
	-- add a new connection on this user
	public addConnection: User ==> ()
	addConnection(c) == connections := connections union {c}
	pre c <> self and c not in set connections
	post connections = connections~ union {c};
	
	-- compares the given name woth the one of the user
	-- TODO enhance comparision
	public similarName: seq of char ==> bool
	similarName(n) == (
	
	-- if the hint is longer than of the name, then we can anticipate a failure
	if len n > len name then
		return false;
	
	-- it only compares until the length of n
	for index = 1 to len n do
		if n(index) <> name(index) then
			return false;

	return true)
	pre len n > 0;
	
	-- update cv
	public updateCV: seq of char ==> ()
	updateCV(text) ==
		cv := text
	pre text <> undefined
	post cv = text;
	
	-- delete cv (write nothing to it)
	public deleteCV: () ==> ()
		deleteCV() == updateCV("")
	post cv = "";
	
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end User