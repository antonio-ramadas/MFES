class Group
types
	public Message = seq1 of char;
values
-- TODO Define values here
instance variables
	-- group users
	public users: set of User := {};
	public msgs: seq of Message := [];

operations
	-- constructor
	public Group: () ==> Group
	Group() == return self
	post users = {} and msgs = [];
	
	-- add a new user to the group
	public addUser: User ==> ()
	addUser(user) == users := users union {user}
	pre user not in set users
	post users = users~ union {user};
	
	-- add a new group message
	public sendMsg: User * Message ==> ()
	sendMsg(user, msg) == msgs := msgs ^ [msg]
	pre user in set users
	post msgs = msgs~ ^ [msg];

	-- remove a user from the group (but not its messages)
	public removeUser: User ==> ()
	removeUser(user) == users := users \ {user}
	pre user in set users
	post users = users~ \ {user};
	
	-- check messages from the group (the user must be in the group)
	public pure checkMsgs: User ==> seq of Message
	checkMsgs(user) == return msgs
	pre user in set users;
	
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Group