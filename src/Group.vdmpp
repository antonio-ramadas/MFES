class Group
types
	public Message = seq1 of char;
values
-- TODO Define values here
instance variables
	public users: set of User := {};
	public msgs: seq of Message := [];
	
	-- must be present at least one user in the group
	inv card users >= 1;

operations
	public Group: User ==> Group
	Group(user) == (
		users := {user};
		return self
	)
	pre user in set Linkedin`getInstance().users
	post users = {user} and msgs = [];
	

	public addUser: User ==> ()
	addUser(user) == users := users union {user}
	pre user not in set users
	post users = users~ union {user};
	

	public sendMsg: User * Message ==> ()
	sendMsg(user, msg) == msgs := msgs ^ [msg]
	pre user in set users
	post msgs = msgs~ ^ [msg];


	public removeUser: User ==> ()
	removeUser(user) == users := users \ {user}
	pre user in set users and
			card users > 1
	post users = users~ \ {user};
	

	public pure checkMsgs: User ==> seq of Message
	checkMsgs(user) == return msgs
	pre user in set users;
	
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Group